---
// Importar los componentes necesarios
import SkillItem from './SkillItem.astro';

// Definir las skills y sus posiciones
const skills = [
  { name: 'HTML5', icon: '/html.svg', position: 'top-[20%] left-[8%] sm:top-[24%] sm:left-[10%]' },
  { name: 'CSS3', icon: '/css.svg', position: 'top-[7%] left-[25%] sm:top-[9%] sm:left-[30%]' },
  { name: 'JavaScript', icon: '/javascript.svg', position: 'top-[12%] right-[12%] sm:top-[15%] sm:right-[15%]' },
  { name: 'TypeScript', icon: '/typescript.svg', position: 'top-[35%] right-[2%] sm:top-[39%] sm:right-[3%]' },
  { name: 'React', icon: '/react.svg', position: 'top-[25%] left-[35%] sm:top-[30%] sm:left-[39%]' },
  { name: 'Next.js', icon: '/nextjs.svg', position: 'top-[40%] left-[12%] sm:top-[43%] sm:left-[15%]' },
  { name: 'Node.js', icon: '/nodejs.svg', position: 'bottom-[25%] left-[5%] sm:bottom-[29%] sm:left-[6%]' },
  { name: 'Git', icon: '/git.svg', position: 'bottom-[12%] left-[12%] sm:bottom-[14%] sm:left-[14%]' },
  { name: 'Astro', icon: '/astro.svg', position: 'bottom-[30%] right-[4%] sm:bottom-[33%] sm:right-[5%]' },
  { name: 'MongoDB', icon: '/mongodb.svg', position: 'bottom-[7%] right-[18%] sm:bottom-[9%] sm:right-[20%]' },
  { name: 'Tailwind', icon: '/tailwind.svg', position: 'bottom-[40%] right-[30%] sm:bottom-[43%] sm:right-[33%]' },
  { name: 'Bootstrap', icon: '/bootstrap.svg', position: 'top-[60%] left-[35%] sm:top-[66%] sm:left-[40%]' },
];

// Script para la animación
const script = `
  document.addEventListener('DOMContentLoaded', () => {
    const skills = Array.from(document.querySelectorAll('.skill-oval'));
    let currentIndex = -1;
    let timeoutId;
    let isAnimating = false;

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

    function calculateRepulsion(activeElement, otherElement) {
      const active = activeElement.getBoundingClientRect();
      const other = otherElement.getBoundingClientRect();
      
      const activeCenter = {
        x: active.left + active.width / 2,
        y: active.top + active.height / 2
      };
      
      const otherCenter = {
        x: other.left + other.width / 2,
        y: other.top + other.height / 2
      };
      
      const angle = Math.atan2(otherCenter.y - activeCenter.y, otherCenter.x - activeCenter.x);
      const distance = Math.sqrt(
        Math.pow(otherCenter.x - activeCenter.x, 2) + 
        Math.pow(otherCenter.y - activeCenter.y, 2)
      );
      
      // Aumentamos aún más la fuerza de repulsión
      const repelForce = Math.min(500, 5000 / distance);
      
      return {
        x: Math.cos(angle) * repelForce,
        y: Math.sin(angle) * repelForce
      };
    }

    function showNextSkill() {
      if (isAnimating) return;
      isAnimating = true;

      // Primero, desactivamos el skill actual y esperamos a que termine la transición
      if (currentIndex >= 0) {
        const currentSkill = skills[currentIndex];
        currentSkill.classList.remove('active');
      }

      // Resetear todas las transformaciones
      skills.forEach(skill => {
        skill.classList.remove('repel');
        skill.style.removeProperty('--repel-x');
        skill.style.removeProperty('--repel-y');
      });

      // Actualizar índice después de un pequeño delay
      setTimeout(() => {
        if (currentIndex === skills.length - 1 || currentIndex === -1) {
          shuffleArray(skills);
          currentIndex = 0;
        } else {
          currentIndex++;
        }

        const activeSkill = skills[currentIndex];

        // Aplicar repulsión a los demás elementos
        skills.forEach(skill => {
          if (skill !== activeSkill) {
            const repel = calculateRepulsion(activeSkill, skill);
            skill.classList.add('repel');
            skill.style.setProperty('--repel-x', \`\${repel.x}px\`);
            skill.style.setProperty('--repel-y', \`\${repel.y}px\`);
          }
        });

        // Activar el nuevo skill después de aplicar la repulsión
        requestAnimationFrame(() => {
          activeSkill.classList.add('active');
          isAnimating = false;
          timeoutId = setTimeout(showNextSkill, 2500);
        });
      }, 300);
    }

    // Iniciar la animación
    showNextSkill();
  });
`;
---

<div class="skills-container w-full flex justify-center">
  <div class="skills-circle w-[300px] sm:w-[350px] md:w-[400px] h-[300px] sm:h-[350px] md:h-[400px] mx-auto relative rounded-full p-4 sm:p-6 md:p-8">
    {skills.map((skill) => (
      <SkillItem
        name={skill.name}
        icon={skill.icon}
        position={skill.position}
      />
    ))}
  </div>
</div>

<style>
  .skills-circle {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(8px);
  }

  .skills-container {
    perspective: 1000px;
    transform-style: preserve-3d;
  }

  @media (max-width: 768px) {
    .skills-circle {
      margin-top: 2rem;
    }
  }
</style>

<script set:html={script}></script> 